{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to tight_loops","text":"<p>This is a demo python package for UTK GEOG510</p> <ul> <li>Free software: MIT license</li> <li> <p>Documentation: https://wnelso18.github.io/tight_loops</p> <p>This is a simple python package that allows for geospatial analysis of vector and raster data. This package also includes another functionality that allows users to upload a .tif file and convert it into a .shp file showing contour lines of the original .tif file. This was created on top of Whitebox open-source GIS software. You can see how to use this function by going to the Examples folder, contour_tif, then opening the notebook in Google Colab. </p> <p>Enjoy!</p> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Adding geojson, shapefiles, basemaps, and other geospatial data to a map</li> <li>Creating a map with multiple layers</li> <li>Converting a .tif to contour lines</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":""},{"location":"changelog/#v002-slight-change","title":"v0.0.2 - slight change","text":""},{"location":"changelog/#v003-lab-4-added","title":"v0.0.3 - Lab 4 added","text":""},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/wnelso18/tight_loops/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>tight_loops could always use more documentation, whether as part of the official tight_loops docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/wnelso18/tight_loops/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up tight_loops for local development.</p> <ol> <li> <p>Fork the tight_loops repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/tight_loops.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv tight_loops\n$ cd tight_loops/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 tight_loops tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/wnelso18/tight_loops/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install tight_loops, run this command in your terminal:</p> <pre><code>pip install tight_loops\n</code></pre> <p>This is the preferred method to install tight_loops, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for tight_loops can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/wnelso18/tight_loops\n</code></pre>"},{"location":"tight_loops/","title":"tight_loops module","text":"<p>Main module.</p>"},{"location":"tight_loops/#tight_loops.tight_loops.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>tight_loops/tight_loops.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=(0,0), zoom=2, **kwargs) -&gt; None:\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n        if \"add_toolbar\" not in kwargs:\n            kwargs[\"add_toolbar\"] = True\n\n        if kwargs[\"add_toolbar\"]:\n            self.add_toolbar()\n\n\n    def add_search_control(self, url = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}', position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\"\"\"\n        search_control = ipyleaflet.SearchControl(url=url, position=position, **kwargs)\n        self.add_control(search_control)\n        return search_control\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        self.add_control(draw_control)\n        return draw_control\n\n    def add_layers_control(self, position= \"topright\", **kwargs):\n\"\"\"Adds a layers control to the map.\"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position, **kwargs)\n        self.add_control(layers_control)\n        return layers_control\n\n    def add_fullscreen_control(self, **kwargs):\n\"\"\"Adds a fullscreen control to the map.\"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(**kwargs)\n        self.add_control(fullscreen_control)\n        return fullscreen_control\n\n    def add_tile_layer(self, url, name, attribution, **kwargs):\n\"\"\"Adds a tile layer to the map.\"\"\"\n        tile_layer = ipyleaflet.TileLayer(url=url, name=name, attribution=attribution, **kwargs)\n        self.add_layer(tile_layer)\n        return tile_layer\n\n    def add_basemap(self, basemap, **kwargs):\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = \"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, name=basemap, attribution=\"Google\")\n\n        elif basemap.lower() == \"satellite\":\n            url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, name=basemap, attribution=\"Google\")\n\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(\"Invalid basemap name.\")\n\n    def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\"\"\"\n        import json\n\n        if isinstance(data, str):\n\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        elif not isinstance(data, dict):\n            raise ValueError(\"data must be a GeoJSON dictionary or a GeoJSON file path.\")\n\n        geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n        self.add_layer(geojson)\n\n    # def add_shp(self, data, **kwargs):\n    #     \"\"\"Adds a Shapefile layer to the map.\"\"\"\n    #     import geopandas as gpd\n    #     import json\n    #     gdf = gpd.read_file(data)\n    #     data = json.loads(gdf.to_json())\n    #     geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    #     self.add_layer(geojson)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n        Args:\n            data (str): The path to the Shapefile.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n\n        if gdf.crs.to_epsg() != 4326:\n\n            gdf = gdf.to_crs(epsg=4326)\n            geojson = gdf.__geo_interface__\n\n        else:\n            geojson = gdf.__geo_interface__\n\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_vector(self, data, **kwargs):\n\"\"\"Adds a vector layer to the map.\"\"\"\n        import geopandas as gpd\n        import json\n        gdf = gpd.read_file(data)\n        data = json.loads(gdf.to_json())\n        geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n        self.add_layer(geojson)\n\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n            Args:\n                url (str): The URL of the raster.\n                name (str): The name of the raster.\n                fit_bounds (bool): Whether to fit the map bounds to the raster.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\" \n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, attribution=\"raster\", **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n    # def add_local_raster(self, filename, name='Local Raster', **kwargs):\n    #     try:\n    #         import localtilesserver\n    #     except ImportError:\n    #         raise ImportError(\"Please install localtilesserver: pip install localtilesserver\")\n\n    def opacity_slider(self, value=0.1, min=0, max=1, position=\"bottomright\"):\n\"\"\"Adds an opacity slider to the map.\n\n        Args:   \n            value (float): The initial value of the slider.\n            min (float): The minimum value of the slider.\n            max (float): The maximum value of the slider.\n            position (str): The position of the slider.\n        \"\"\"\n\n        slider = widgets.FloatSlider(value=value, min=min ,max=max)\n        widgets.jslink((self.layers[1], 'opacity'), (slider, 'value'))\n        control = WidgetControl(widget=slider, position=position)\n        self.add_control(control)\n\n    def add_image(self, url, width, height, position=\"bottomleft\"):\n\"\"\"Adds an image to the map.\n\n        Args:\n            url (str): The URL of the image.\n            width (str): The width of the image.\n            height (str): The height of the image.\n            position (str): The position of the image.\n        \"\"\"\n\n        widget = widgets.HTML(value=f\"&lt;img src={url} width='{width}' height='{height}'&gt;\")\n        control = WidgetControl(widget=widget, position = position)\n        self.add_control(control)\n\n    def add_toolbar(self, position=\"topright\"):\n\n\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.HBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [toolbar_button, close_button]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"bluetooth\", \"area-chart\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n\n\n        output = widgets.Output()\n        output_ctrl = WidgetControl(widget=output, position=\"bottomright\")\n        self.add_control(output_ctrl)\n\n\n        basemap = widgets.Dropdown(\n\n            options = [\"Satellite\", \"Roadmap\"],\n            value = None,\n            description = \"Basemap\",\n            style = {\"description_width\": \"initial\"},\n            layout=widgets.Layout(width=\"250px\")\n        )\n\n\n        basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\")\n\n        def change_basemap(change):\n            if change['new']:\n                with output:\n                    print(basemap.value)\n                self.add_basemap(basemap.value)\n\n        basemap.observe(change_basemap, names=\"value\")\n\n        def tool_click(b):\n            with output:\n                print(f\"{b.icon} clicked\")\n\n                if b.icon == \"map\":\n                    if basemap_ctrl not in self.controls:\n                        self.add(basemap_ctrl)\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n        toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n        self.add_control(toolbar_ctrl)\n\n    def csv_to_shp(self, data, output):\n        import pandas as pd\n        import geopandas as gpd\n        from shapely.geometry import Point\n\n        df = pd.read_csv(data)\n\n        geometry = [Point(xy) for xy in zip(df.longitude, df.latitude)]\n        gdf = gpd.GeoDataFrame(df, geometry=geometry)\n        gdf = gdf.set_crs(epsg=4326)\n        gdf.to_file(output, driver='ESRI Shapefile')\n\n        self.add_shp(output)\n\n\n    def grouping_points(self, data):\n        import pandas as pd\n        from ipyleaflet import Marker, MarkerCluster\n        import ipywidgets as widgets\n\n        df = pd.read_csv(data)\n\n        markers = []\n\n        for index, row in df.iterrows():\n            name = row['name']\n            latitude = row['latitude']\n            longitude = row['longitude']\n            marker = Marker(location=(latitude, longitude))\n\n            popup_content = widgets.HTML()\n            popup_content.value = f\"&lt;b&gt;Name:&lt;/b&gt; {name}&lt;br&gt;&lt;b&gt;Latitude:&lt;/b&gt; {latitude}&lt;br&gt;&lt;b&gt;Longitude:&lt;/b&gt; {longitude}\"\n            marker.popup = popup_content\n\n            markers.append(marker)\n\n\n        marker_cluster = MarkerCluster()\n\n        marker_cluster = MarkerCluster(markers=markers)\n\n        self.add_layer(marker_cluster)\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    self.add_control(draw_control)\n    return draw_control\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, **kwargs)</code>","text":"<p>Adds a fullscreen control to the map.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_fullscreen_control(self, **kwargs):\n\"\"\"Adds a fullscreen control to the map.\"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(**kwargs)\n    self.add_control(fullscreen_control)\n    return fullscreen_control\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_geojson","title":"<code>add_geojson(self, data, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\"\"\"\n    import json\n\n    if isinstance(data, str):\n\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    elif not isinstance(data, dict):\n        raise ValueError(\"data must be a GeoJSON dictionary or a GeoJSON file path.\")\n\n    geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_image","title":"<code>add_image(self, url, width, height, position='bottomleft')</code>","text":"<p>Adds an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>width</code> <code>str</code> <p>The width of the image.</p> required <code>height</code> <code>str</code> <p>The height of the image.</p> required <code>position</code> <code>str</code> <p>The position of the image.</p> <code>'bottomleft'</code> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_image(self, url, width, height, position=\"bottomleft\"):\n\"\"\"Adds an image to the map.\n\n    Args:\n        url (str): The URL of the image.\n        width (str): The width of the image.\n        height (str): The height of the image.\n        position (str): The position of the image.\n    \"\"\"\n\n    widget = widgets.HTML(value=f\"&lt;img src={url} width='{width}' height='{height}'&gt;\")\n    control = WidgetControl(widget=widget, position = position)\n    self.add_control(control)\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright', **kwargs)</code>","text":"<p>Adds a layers control to the map.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_layers_control(self, position= \"topright\", **kwargs):\n\"\"\"Adds a layers control to the map.\"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position, **kwargs)\n    self.add_control(layers_control)\n    return layers_control\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster.</p> required <code>name</code> <code>str</code> <p>The name of the raster.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map bounds to the raster.</p> <code>True</code> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n        Args:\n            url (str): The URL of the raster.\n            name (str): The name of the raster.\n            fit_bounds (bool): Whether to fit the map bounds to the raster.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\" \n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, attribution=\"raster\", **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_search_control","title":"<code>add_search_control(self, url='https://nominatim.openstreetmap.org/search?format=json&amp;q={s}', position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_search_control(self, url = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}', position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\"\"\"\n    search_control = ipyleaflet.SearchControl(url=url, position=position, **kwargs)\n    self.add_control(search_control)\n    return search_control\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Shapefile.</p> required Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n    Args:\n        data (str): The path to the Shapefile.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n\n    if gdf.crs.to_epsg() != 4326:\n\n        gdf = gdf.to_crs(epsg=4326)\n        geojson = gdf.__geo_interface__\n\n    else:\n        geojson = gdf.__geo_interface__\n\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution, **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_tile_layer(self, url, name, attribution, **kwargs):\n\"\"\"Adds a tile layer to the map.\"\"\"\n    tile_layer = ipyleaflet.TileLayer(url=url, name=name, attribution=attribution, **kwargs)\n    self.add_layer(tile_layer)\n    return tile_layer\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Adds a vector layer to the map.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def add_vector(self, data, **kwargs):\n\"\"\"Adds a vector layer to the map.\"\"\"\n    import geopandas as gpd\n    import json\n    gdf = gpd.read_file(data)\n    data = json.loads(gdf.to_json())\n    geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.Map.opacity_slider","title":"<code>opacity_slider(self, value=0.1, min=0, max=1, position='bottomright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>!!! args \" \"     value (float): The initial value of the slider.     min (float): The minimum value of the slider.     max (float): The maximum value of the slider.     position (str): The position of the slider.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def opacity_slider(self, value=0.1, min=0, max=1, position=\"bottomright\"):\n\"\"\"Adds an opacity slider to the map.\n\n    Args:   \n        value (float): The initial value of the slider.\n        min (float): The minimum value of the slider.\n        max (float): The maximum value of the slider.\n        position (str): The position of the slider.\n    \"\"\"\n\n    slider = widgets.FloatSlider(value=value, min=min ,max=max)\n    widgets.jslink((self.layers[1], 'opacity'), (slider, 'value'))\n    control = WidgetControl(widget=slider, position=position)\n    self.add_control(control)\n</code></pre>"},{"location":"tight_loops/#tight_loops.tight_loops.generate_random_string","title":"<code>generate_random_string(length=15)</code>","text":"<p>Generates a random string.</p> Source code in <code>tight_loops/tight_loops.py</code> <pre><code>def generate_random_string(length=15):\n\"\"\"Generates a random string.\"\"\"\n    return ''.join([random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(length)])\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use tight_loops in a project:</p> <pre><code>import tight_loops\n</code></pre>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/","title":"Working With COG","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment this line if you need to install the dependencies\n# !pip install folium httpx\n</pre> # Uncomment this line if you need to install the dependencies # !pip install folium httpx In\u00a0[\u00a0]: Copied! <pre>import json\n\nimport httpx\n\nfrom folium import Map, TileLayer\n\n%matplotlib inline\n</pre> import json  import httpx  from folium import Map, TileLayer  %matplotlib inline In\u00a0[\u00a0]: Copied! <pre>titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind.\nurl = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind. url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[\u00a0]: Copied! <pre># Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbounds = r[\"bounds\"]\nprint(r)\n</pre> # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  bounds = r[\"bounds\"] print(r) In\u00a0[\u00a0]: Copied! <pre># Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/statistics\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(json.dumps(r, indent=4))\n</pre> # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/statistics\",     params = {         \"url\": url,     } ).json()  print(json.dumps(r, indent=4)) In\u00a0[\u00a0]: Copied! <pre>import tight_loops\n\nm = tight_loops.Map(center=[-20.2, 57.5], zoom=10)\nm.add_tile_layer(name='mauritius', url='https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif', attribution='DigitalGlobe')\n\nm\n</pre> import tight_loops  m = tight_loops.Map(center=[-20.2, 57.5], zoom=10) m.add_tile_layer(name='mauritius', url='https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif', attribution='DigitalGlobe')  m In\u00a0[\u00a0]: Copied! <pre>bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n</pre> bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]] In\u00a0[\u00a0]: Copied! <pre>m.fit_bounds(bbox)\n</pre> m.fit_bounds(bbox) In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=13\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"DigitalGlobe OpenData\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,     } ).json()  m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=13 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"DigitalGlobe OpenData\" ) aod_layer.add_to(m) m In\u00a0[\u00a0]: Copied! <pre>url = \"https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2573-1085/swissalti3d_2019_2573-1085_0.5_2056_5728.tif\"\n\n# Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(r)\nprint(\"Data is of type:\", r[\"dtype\"])\n\n# This dataset has statistics metadata\nminv, maxv = r[\"band_metadata\"][0][1][\"STATISTICS_MINIMUM\"], r[\"band_metadata\"][0][1][\"STATISTICS_MAXIMUM\"]\nprint(\"With values from \", minv, \"to \", maxv)\n</pre>  url = \"https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2573-1085/swissalti3d_2019_2573-1085_0.5_2056_5728.tif\"  # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  print(r) print(\"Data is of type:\", r[\"dtype\"])  # This dataset has statistics metadata minv, maxv = r[\"band_metadata\"][0][1][\"STATISTICS_MINIMUM\"], r[\"band_metadata\"][0][1][\"STATISTICS_MAXIMUM\"] print(\"With values from \", minv, \"to \", maxv)   In\u00a0[\u00a0]: Copied! <pre># We could get the min/max values using the statistics endpoint\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/statistics\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(json.dumps(r[\"1\"], indent=4))\n</pre> # We could get the min/max values using the statistics endpoint r = httpx.get(     f\"{titiler_endpoint}/cog/statistics\",     params = {         \"url\": url,     } ).json()  print(json.dumps(r[\"1\"], indent=4)) In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply linear rescaling using Min/Max value</li> </ol> <p>This is needed to rescale the value to byte (0 -&gt; 255) which can then be encoded in JPEG or PNG</p> In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"rescale\": f\"{minv},{maxv}\"\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"rescale\": f\"{minv},{maxv}\"     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply ColorMap</li> </ol> <p>Now that the data is rescaled to byte values (0 -&gt; 255) we can apply a colormap</p> In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"rescale\": f\"{minv},{maxv}\",\n        \"colormap_name\": \"terrain\"\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"rescale\": f\"{minv},{maxv}\",         \"colormap_name\": \"terrain\"     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply non-linear colormap (intervals)</li> </ol> <p>see https://cogeotiff.github.io/rio-tiler/colormap/#intervals-colormaps</p> In\u00a0[\u00a0]: Copied! <pre>import json\n\ncmap = json.dumps(\n    [\n        # ([min, max], [r, g, b, a])\n        ([0, 1500], [255,255,204, 255]),\n        ([1500, 1700], [161,218,180, 255]),\n        ([1700, 1900], [65,182,196, 255]),\n        ([1900, 2000], [44,127,184, 255]),\n        ([2000, 3000], [37,52,148, 255]),\n    ]\n)\n# https://colorbrewer2.org/#type=sequential&amp;scheme=YlGnBu&amp;n=5\n\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"colormap\": cmap\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> import json  cmap = json.dumps(     [         # ([min, max], [r, g, b, a])         ([0, 1500], [255,255,204, 255]),         ([1500, 1700], [161,218,180, 255]),         ([1700, 1900], [65,182,196, 255]),         ([1900, 2000], [44,127,184, 255]),         ([2000, 3000], [37,52,148, 255]),     ] ) # https://colorbrewer2.org/#type=sequential&amp;scheme=YlGnBu&amp;n=5  r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"colormap\": cmap     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#working-with-cog","title":"Working With COG\u00b6","text":"<p>For this demo we will use the new <code>DigitalGlobe OpenData</code> dataset https://www.digitalglobe.com/ecosystem/open-data</p>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#requirements","title":"Requirements\u00b6","text":"<ul> <li>folium</li> <li>httpx</li> </ul> <p><code>pip install folium httpx</code></p>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#get-cog-info","title":"Get COG Info\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#get-cog-metadata","title":"Get COG Metadata\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#display-tiles","title":"Display Tiles\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#work-with-non-byte-data","title":"Work with non-byte data\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#display-tiles","title":"Display Tiles\u00b6","text":"<ol> <li>Without <code>rescaling</code> values, TiTiler will return black/grey tiles because it will rescale the data base on min/max value of the datatype.</li> </ol>"},{"location":"examples/contour_tif/","title":"Contour tif","text":"In\u00a0[\u00a0]: Copied! <pre>import tight_loops\n</pre> import tight_loops In\u00a0[\u00a0]: Copied! <pre>m = tight_loops.Map()\n</pre> m = tight_loops.Map() In\u00a0[\u00a0]: Copied! <pre>tight_loops.contour_tif_box(\"B5.TIF\", \"OUTPUT/new_contours.shp\", interval=300)\n</pre> tight_loops.contour_tif_box(\"B5.TIF\", \"OUTPUT/new_contours.shp\", interval=300)  In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m In\u00a0[\u00a0]: Copied! <pre>m.add_shp(\"OUTPUT/new_contours.shp\", width=1)\n</pre> m.add_shp(\"OUTPUT/new_contours.shp\", width=1)"},{"location":"examples/contour_tif/#contour-lines-from-raster","title":"Contour Lines From Raster\u00b6","text":""},{"location":"examples/final_exam/","title":"Final exam","text":"In\u00a0[\u00a0]: Copied! <pre>import tight_loops\n</pre> import tight_loops In\u00a0[\u00a0]: Copied! <pre>m = tight_loops.Map()\n</pre> m = tight_loops.Map() In\u00a0[\u00a0]: Copied! <pre>data = \"world_cities.csv\"\n</pre> data = \"world_cities.csv\" In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m In\u00a0[\u00a0]: Copied! <pre>m.csv_to_shp(data, \"world_cities.shp\")\n</pre> m.csv_to_shp(data, \"world_cities.shp\") In\u00a0[\u00a0]: Copied! <pre>m2 = tight_loops.Map()\nm2\n</pre> m2 = tight_loops.Map() m2 In\u00a0[\u00a0]: Copied! <pre>m2.grouping_points(data)\n</pre> m2.grouping_points(data) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import tight_loops.folium_loops as tight_loops\n</pre> import tight_loops.folium_loops as tight_loops In\u00a0[2]: Copied! <pre>m = tight_loops.Map()\n</pre> m = tight_loops.Map() In\u00a0[3]: Copied! <pre>m.add_basemap(\"satellite\")\n</pre> m.add_basemap(\"satellite\") In\u00a0[4]: Copied! <pre>url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n</pre> url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\" In\u00a0[5]: Copied! <pre>m.add_tile_layer(url, name=\"satellite\", attribution=\"Google\")\n</pre> m.add_tile_layer(url, name=\"satellite\", attribution=\"Google\") In\u00a0[6]: Copied! <pre>m.add_geojson(\"../labs/lab7/map (1).geojson\")\n</pre> m.add_geojson(\"../labs/lab7/map (1).geojson\") In\u00a0[7]: Copied! <pre>m.add_shp(\"../labs/lab6/countries.zip\")\n</pre> m.add_shp(\"../labs/lab6/countries.zip\") In\u00a0[8]: Copied! <pre>m\n</pre> m Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World\")\n</pre> print(\"Hello World\") <pre>Hello World\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(basemap=basemaps.Esri.WorldTopoMap, center=(40, -100), zoom=4)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(basemap=basemaps.Esri.WorldTopoMap, center=(40, -100), zoom=4)  m <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[2]: Copied! <pre>import leafmap\n</pre> import leafmap In\u00a0[6]: Copied! <pre>m = leafmap.Map()\nm.add_basemap(\"HYBRID\")\nm\n</pre> m = leafmap.Map() m.add_basemap(\"HYBRID\") m  <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"In\u00a0[1]: Copied! <pre>import tight_loops\nimport ipywidgets as widget\n</pre> import tight_loops import ipywidgets as widget In\u00a0[2]: Copied! <pre>m = tight_loops.Map()\nm\n</pre> m = tight_loops.Map() m <pre>Map(center=[0, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text'\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name=\"raster\", fit_bounds=True)\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name=\"raster\", fit_bounds=True) In\u00a0[\u00a0]: Copied! <pre>m.opacity_slider()\n</pre> m.opacity_slider() In\u00a0[\u00a0]: Copied! <pre>m.layers[1].interact(opacity=(0,1,0.05))\n</pre> m.layers[1].interact(opacity=(0,1,0.05)) In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[\u00a0]: Copied! <pre>slider = widgets.FloatSlider(value=0.1, min=0, max=1)\nslider\n</pre> slider = widgets.FloatSlider(value=0.1, min=0, max=1) slider In\u00a0[\u00a0]: Copied! <pre>widgets.jsdlink((slider, 'value'), (m.layers[-1], 'opacity'))\n</pre> widgets.jsdlink((slider, 'value'), (m.layers[-1], 'opacity')) In\u00a0[\u00a0]: Copied! <pre>control = WidgetControl(widget=slider,position=\"bottomright\")\n</pre> control = WidgetControl(widget=slider,position=\"bottomright\") In\u00a0[\u00a0]: Copied! <pre>m.add(control)\n</pre> m.add(control) In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[\u00a0]: Copied! <pre>widgets.HTML(value='&lt;img src=\"https://wildlife.ca.gov/Portals/0/Images/Fishing/Inland/BrookTrout/BrookTrout-DuaneRaver-USFWS.png\" width=300&gt;')\n</pre> widgets.HTML(value='') In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m In\u00a0[3]: Copied! <pre>url = \"https://wildlife.ca.gov/Portals/0/Images/Fishing/Inland/BrookTrout/BrookTrout-DuaneRaver-USFWS.png\"\n</pre> url = \"https://wildlife.ca.gov/Portals/0/Images/Fishing/Inland/BrookTrout/BrookTrout-DuaneRaver-USFWS.png\" In\u00a0[4]: Copied! <pre>m.add_image(url, width=300, height=100, position=\"bottomright\")\n</pre> m.add_image(url, width=300, height=100, position=\"bottomright\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[3]: Copied! <pre>import tight_loops\n</pre> import tight_loops In\u00a0[4]: Copied! <pre>m = tight_loops.Map(center=(40, -100), zoom=4)\nm\n</pre> m = tight_loops.Map(center=(40, -100), zoom=4) m <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>url = 'https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif'\n</pre> url = 'https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif' In\u00a0[\u00a0]: Copied! <pre>m.add_raster(url, fit_bounds=True)\n</pre> m.add_raster(url, fit_bounds=True) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/tight_loops/","title":"Tight loops","text":"In\u00a0[1]: Copied! <pre>import tight_loops\n</pre> import tight_loops In\u00a0[2]: Copied! <pre>m = tight_loops.Map()\nm\n</pre> m = tight_loops.Map() m <pre>Map(center=[0, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text'\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_shp('countries.zip')\n</pre> m.add_shp('countries.zip') <pre>GeoJSON(data={'type': 'FeatureCollection', 'features': [{'id': '0', 'type': 'Feature', 'properties': {'NAME': \u2026</pre> In\u00a0[3]: Copied! <pre>m.add_geojson('map.geojson', name='smokies')\n</pre> m.add_geojson('map.geojson', name='smokies') <pre>GeoJSON(data={'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'properties': {}, 'geometry': {'co\u2026</pre> In\u00a0[3]: Copied! <pre>import xyzservices.providers as xyz\n</pre> import xyzservices.providers as xyz In\u00a0[6]: Copied! <pre>xyz.HikeBike.keys()\n</pre> xyz.HikeBike.keys() Out[6]: <pre>dict_keys(['HikeBike', 'HillShading'])</pre> In\u00a0[4]: Copied! <pre>url = xyz.Esri.WorldImagery.build_url()\n\nm.add_tile_layer(url = url, name = \"Satellite\", attribution = \"Esri\")\n</pre> url = xyz.Esri.WorldImagery.build_url()  m.add_tile_layer(url = url, name = \"Satellite\", attribution = \"Esri\") <pre>TileLayer(attribution='Esri', name='Satellite', options=['attribution', 'bounds', 'detect_retina', 'max_native\u2026</pre> In\u00a0[7]: Copied! <pre>m.add_basemap(\"HikeBike.HillShading\")\n</pre> m.add_basemap(\"HikeBike.HillShading\") In\u00a0[3]: Copied! <pre>m.add_search_control(position = 'topright', zoom = 7)\n</pre> m.add_search_control(position = 'topright', zoom = 7) <pre>SearchControl(found_style={'fillColor': '#3f0', 'color': '#0f0'}, options=['animate_location', 'auto_collapse'\u2026</pre> In\u00a0[4]: Copied! <pre>url = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n</pre> url = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\" In\u00a0[5]: Copied! <pre>m.add_tile_layer(url = url, name = \"Google Satellite\", attribution = \"Google\")\n</pre> m.add_tile_layer(url = url, name = \"Google Satellite\", attribution = \"Google\") <pre>TileLayer(attribution='Google', name='Google Satellite', options=['attribution', 'bounds', 'detect_retina', 'm\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>import tight_loops\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import tight_loops import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[3]: Copied! <pre>m = tight_loops.Map(center=(52.204793, 360.121558), zoom=9)\nm\n</pre> m = tight_loops.Map(center=(52.204793, 360.121558), zoom=9) m <pre>Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[\u00a0]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar In\u00a0[\u00a0]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[\u00a0]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n        \nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()          close_button.observe(close_click, \"value\") toolbar In\u00a0[\u00a0]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[\u00a0]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j],                                      layout=widgets.Layout(width=\"28px\", padding=\"0px\")) grid In\u00a0[\u00a0]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[\u00a0]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") toolbar In\u00a0[\u00a0]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[\u00a0]: Copied! <pre>m = tight_loops.Map()\nm.add_control(toolbar_ctrl)\nm\n</pre> m = tight_loops.Map() m.add_control(toolbar_ctrl) m In\u00a0[\u00a0]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\nm.add_control(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") m.add_control(output_ctrl) In\u00a0[\u00a0]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\") In\u00a0[\u00a0]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click)"},{"location":"labs/lab4/lab4/","title":"Lab 4","text":"In\u00a0[30]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2023-03-08 22:06:07.850332\n</pre> In\u00a0[31]: Copied! <pre>person =  'Robby'\nprint(f\"Hello {person}, would you like to learn some Python today?\")\n</pre> person =  'Robby' print(f\"Hello {person}, would you like to learn some Python today?\") <pre>Hello Robby, would you like to learn some Python today?\n</pre> In\u00a0[32]: Copied! <pre>print(person.upper())\nprint(person.lower())\nprint(person.title())\n</pre> print(person.upper()) print(person.lower()) print(person.title()) <pre>ROBBY\nrobby\nRobby\n</pre> In\u00a0[33]: Copied! <pre>person = \"john denver\"\nmessage = f'{person.title()} once said, \u201cRelax, ease back in your seats and let the music take you wherever it does.\u201d'\nprint(message)\n</pre> person = \"john denver\" message = f'{person.title()} once said, \u201cRelax, ease back in your seats and let the music take you wherever it does.\u201d' print(message) <pre>John Denver once said, \u201cRelax, ease back in your seats and let the music take you wherever it does.\u201d\n</pre> In\u00a0[34]: Copied! <pre>person = \" john  denver \"\nprint(f'\\t{person.lstrip().rstrip().strip().title()} once said, \\n \u201cRelax, ease back in your seats and let the music take you wherever it does.\u201d')\n</pre> person = \" john  denver \" print(f'\\t{person.lstrip().rstrip().strip().title()} once said, \\n \u201cRelax, ease back in your seats and let the music take you wherever it does.\u201d') <pre>\tJohn  Denver once said, \n \u201cRelax, ease back in your seats and let the music take you wherever it does.\u201d\n</pre> In\u00a0[35]: Copied! <pre>names = ['john', 'jane', 'jim', 'joe']\nprint(names[0].title())\nprint(names[1].title())\nprint(names[2].title())\nprint(names[3].title())\n</pre> names = ['john', 'jane', 'jim', 'joe'] print(names[0].title()) print(names[1].title()) print(names[2].title()) print(names[3].title()) <pre>John\nJane\nJim\nJoe\n</pre> In\u00a0[36]: Copied! <pre>drive = ['ford', 'chevy', 'dodge', 'toyota']\nprint(f'I would like to own a {drive[0].title()} truck.')\nprint(f'I would like to own a {drive[1].title()} truck.')\nprint(f'I would like to own a {drive[2].title()} truck.')\nprint(f'I would like to own a {drive[3].title()} truck.')\n</pre> drive = ['ford', 'chevy', 'dodge', 'toyota'] print(f'I would like to own a {drive[0].title()} truck.') print(f'I would like to own a {drive[1].title()} truck.') print(f'I would like to own a {drive[2].title()} truck.') print(f'I would like to own a {drive[3].title()} truck.') <pre>I would like to own a Ford truck.\nI would like to own a Chevy truck.\nI would like to own a Dodge truck.\nI would like to own a Toyota truck.\n</pre> In\u00a0[37]: Copied! <pre>pizza = ['pepperoni', 'sausage', 'cheese', 'pineapple']\nfor pizza in pizza:\n    print(f'I like {pizza} pizza.')\n</pre> pizza = ['pepperoni', 'sausage', 'cheese', 'pineapple'] for pizza in pizza:     print(f'I like {pizza} pizza.') <pre>I like pepperoni pizza.\nI like sausage pizza.\nI like cheese pizza.\nI like pineapple pizza.\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[38]: Copied! <pre>pizza = ['pepperoni', 'sausage', 'cheese', 'pineapple']\nfor pizza in pizza:\n    print(f'I like {pizza} pizza.')\nprint('I really love pizza!')\n</pre> pizza = ['pepperoni', 'sausage', 'cheese', 'pineapple'] for pizza in pizza:     print(f'I like {pizza} pizza.') print('I really love pizza!') <pre>I like pepperoni pizza.\nI like sausage pizza.\nI like cheese pizza.\nI like pineapple pizza.\nI really love pizza!\n</pre> In\u00a0[39]: Copied! <pre>animals = ['dog', 'cat', 'bird', 'fish']\nfor animal in animals:\n    print(f'A {animal} would make a great pet.')\n</pre> animals = ['dog', 'cat', 'bird', 'fish'] for animal in animals:     print(f'A {animal} would make a great pet.') <pre>A dog would make a great pet.\nA cat would make a great pet.\nA bird would make a great pet.\nA fish would make a great pet.\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[40]: Copied! <pre>animals = ['dog', 'cat', 'bird', 'fish']\nfor animal in animals:\n    print(f'A {animal} would make a great pet.')\nprint('Any of these animals would make a great pet!')\n</pre> animals = ['dog', 'cat', 'bird', 'fish'] for animal in animals:     print(f'A {animal} would make a great pet.') print('Any of these animals would make a great pet!') <pre>A dog would make a great pet.\nA cat would make a great pet.\nA bird would make a great pet.\nA fish would make a great pet.\nAny of these animals would make a great pet!\n</pre> In\u00a0[41]: Copied! <pre>values = list(range(1,101))\nprint(values)\nprint(min(values))\nprint(max(values))\nprint(sum(values))\n</pre>  values = list(range(1,101)) print(values) print(min(values)) print(max(values)) print(sum(values))  <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n1\n100\n5050\n</pre> In\u00a0[42]: Copied! <pre>numbers = list(range(1,21,2))\nfor number in numbers:\n    print(number)\n</pre> numbers = list(range(1,21,2)) for number in numbers:     print(number) <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[43]: Copied! <pre>multiples = []\nfor value in range(3,31):\n    multiple = value * 3\n    multiples.append(multiple)\nprint(multiples)\n</pre> multiples = [] for value in range(3,31):     multiple = value * 3     multiples.append(multiple) print(multiples)  <pre>[9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90]\n</pre> In\u00a0[44]: Copied! <pre>list_ = []\nfor value in range(1,11):\n    list_.append(value**3)\nprint(list_)\n</pre> list_ = [] for value in range(1,11):     list_.append(value**3) print(list_) <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n</pre> In\u00a0[45]: Copied! <pre>animals = ['dog', 'cat', 'bird', 'fish']\nfor animal in animals:\n    print(f'A {animal} would make a great pet.')\nprint('Any of these animals would make a great pet!')\n\nprint('The first three items in the list are:')\nfor animal in animals[:3]:\n    print(animal.title())\n</pre> animals = ['dog', 'cat', 'bird', 'fish'] for animal in animals:     print(f'A {animal} would make a great pet.') print('Any of these animals would make a great pet!')  print('The first three items in the list are:') for animal in animals[:3]:     print(animal.title())      <pre>A dog would make a great pet.\nA cat would make a great pet.\nA bird would make a great pet.\nA fish would make a great pet.\nAny of these animals would make a great pet!\nThe first three items in the list are:\nDog\nCat\nBird\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[46]: Copied! <pre>print('Three items from the middle of the list are:')\nfor animal in animals[1:4]:\n    print(animal.title())\n</pre> print('Three items from the middle of the list are:') for animal in animals[1:4]:     print(animal.title()) <pre>Three items from the middle of the list are:\nCat\nBird\nFish\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[47]: Copied! <pre>print('The last three items in the list are:')\nfor animal in animals[-3:]:\n    print(animal.title())\n</pre> print('The last three items in the list are:') for animal in animals[-3:]:     print(animal.title()) <pre>The last three items in the list are:\nCat\nBird\nFish\n</pre> In\u00a0[48]: Copied! <pre>foods = ('pizza', 'tacos', 'burgers', 'chicken', 'steak')\nfor food in foods:\n    print(food)\n</pre> foods = ('pizza', 'tacos', 'burgers', 'chicken', 'steak') for food in foods:     print(food) <pre>pizza\ntacos\nburgers\nchicken\nsteak\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[49]: Copied! <pre>foods = ('pizza', 'tacos', 'burgers', 'chicken', 'steak')\nnew_foods = list(foods)\nnew_foods[0] = 'pasta'\nnew_foods[1] = 'salad'\nfoods = tuple(new_foods)\n\nfor foo in foods:\n    print(foo)\n</pre> foods = ('pizza', 'tacos', 'burgers', 'chicken', 'steak') new_foods = list(foods) new_foods[0] = 'pasta' new_foods[1] = 'salad' foods = tuple(new_foods)  for foo in foods:     print(foo)  <pre>pasta\nsalad\nburgers\nchicken\nsteak\n</pre> In\u00a0[50]: Copied! <pre>alien_color = 'green'\nif alien_color == 'green':\n    print('You just earned 5 points!')\n\nalien_color = 'red'\nif alien_color == 'green':\n    print('You just earned 5 points!')\n</pre> alien_color = 'green' if alien_color == 'green':     print('You just earned 5 points!')  alien_color = 'red' if alien_color == 'green':     print('You just earned 5 points!')  <pre>You just earned 5 points!\n</pre> In\u00a0[51]: Copied! <pre>age = 18\nif age &lt; 2:\n    print('You are a baby.')\nelif age &gt;= 2 and age &lt; 4:\n    print('You are a toddler.')\nelif age &gt;= 4 and age &lt; 13:\n    print('You are a kid.')\nelif age &gt;= 13 and age &lt; 20:\n    print('You are a teenager.')\nelif age &gt;= 20 and age &lt; 65:\n    print('You are an adult.')\n</pre> age = 18 if age &lt; 2:     print('You are a baby.') elif age &gt;= 2 and age &lt; 4:     print('You are a toddler.') elif age &gt;= 4 and age &lt; 13:     print('You are a kid.') elif age &gt;= 13 and age &lt; 20:     print('You are a teenager.') elif age &gt;= 20 and age &lt; 65:     print('You are an adult.') <pre>You are a teenager.\n</pre> In\u00a0[52]: Copied! <pre>fave_fruits = ['apples', 'oranges', 'bananas']\nif 'apples' in fave_fruits:\n    print('You really like apples!')\nif 'oranges' in fave_fruits:\n    print('You really like oranges!')\nif 'bananas' in fave_fruits:\n    print('You really like bananas!')\nif 'pears' in fave_fruits:\n    print('You really like pears!')\nif 'grapes' in fave_fruits:\n    print('You really like grapes!')\n</pre> fave_fruits = ['apples', 'oranges', 'bananas'] if 'apples' in fave_fruits:     print('You really like apples!') if 'oranges' in fave_fruits:     print('You really like oranges!') if 'bananas' in fave_fruits:     print('You really like bananas!') if 'pears' in fave_fruits:     print('You really like pears!') if 'grapes' in fave_fruits:     print('You really like grapes!') <pre>You really like apples!\nYou really like oranges!\nYou really like bananas!\n</pre> In\u00a0[53]: Copied! <pre>admin = ['admin', 'user1', 'user2', 'user3', 'user4']\nfor user in admin:\n    if user == 'admin':\n        print('Hello admin, would you like to see a status report?')\n    else:\n        print(f'Hello {user}, thank you for logging in again.')\n</pre> admin = ['admin', 'user1', 'user2', 'user3', 'user4'] for user in admin:     if user == 'admin':         print('Hello admin, would you like to see a status report?')     else:         print(f'Hello {user}, thank you for logging in again.') <pre>Hello admin, would you like to see a status report?\nHello user1, thank you for logging in again.\nHello user2, thank you for logging in again.\nHello user3, thank you for logging in again.\nHello user4, thank you for logging in again.\n</pre> In\u00a0[54]: Copied! <pre>current_users = ['admin', 'user1', 'user2', 'user3', 'user4']\nnew_users = ['user1', 'user2', 'user5', 'user6', 'user7']\nfor user in new_users:\n    if user in current_users:\n        print(f'{user} is taken. Please enter a new username.')\n    else:\n        print(f'{user} is available.')\n</pre> current_users = ['admin', 'user1', 'user2', 'user3', 'user4'] new_users = ['user1', 'user2', 'user5', 'user6', 'user7'] for user in new_users:     if user in current_users:         print(f'{user} is taken. Please enter a new username.')     else:         print(f'{user} is available.')          <pre>user1 is taken. Please enter a new username.\nuser2 is taken. Please enter a new username.\nuser5 is available.\nuser6 is available.\nuser7 is available.\n</pre> In\u00a0[55]: Copied! <pre>nums = list(range(1,10))\nfor num in nums:\n    if num == 1:\n        print(f'{num}st')\n    elif num == 2:\n        print(f'{num}nd')\n    elif num == 3:\n        print(f'{num}rd')\n    else:\n        print(f'{num}th')\n</pre> nums = list(range(1,10)) for num in nums:     if num == 1:         print(f'{num}st')     elif num == 2:         print(f'{num}nd')     elif num == 3:         print(f'{num}rd')     else:         print(f'{num}th') <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"labs/lab4/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"labs/lab4/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geosdemo.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"labs/lab4/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"labs/lab4/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"labs/lab4/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"labs/lab4/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"labs/lab4/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"labs/lab4/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"labs/lab4/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"labs/lab4/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"labs/lab4/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"labs/lab4/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"labs/lab4/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"labs/lab4/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"labs/lab4/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"labs/lab4/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"labs/lab4/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"labs/lab4/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"labs/lab4/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"labs/lab4/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"labs/lab4/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"labs/lab4/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"labs/lab5/lab5/","title":"Lab 5","text":"In\u00a0[33]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2023-03-22 21:47:18.128182\n</pre> In\u00a0[34]: Copied! <pre>person = {'first_name': 'willie', 'last_name': 'nelson', 'age': '21', 'city':'gatlinburg'}\n\nfor key, value in person.items():\n  print(f'{key} --&gt; {value}')\n</pre> person = {'first_name': 'willie', 'last_name': 'nelson', 'age': '21', 'city':'gatlinburg'}  for key, value in person.items():   print(f'{key} --&gt; {value}') <pre>first_name --&gt; willie\nlast_name --&gt; nelson\nage --&gt; 21\ncity --&gt; gatlinburg\n</pre> In\u00a0[35]: Copied! <pre>fav_numbers = {'will':'77','jenna':'8','kevin':'7','robby':'50','parker':'13'}\nfor key, value in fav_numbers.items():\n  print(f'{key} --&gt; {value}')\n</pre> fav_numbers = {'will':'77','jenna':'8','kevin':'7','robby':'50','parker':'13'} for key, value in fav_numbers.items():   print(f'{key} --&gt; {value}') <pre>will --&gt; 77\njenna --&gt; 8\nkevin --&gt; 7\nrobby --&gt; 50\nparker --&gt; 13\n</pre> In\u00a0[36]: Copied! <pre>words = {'sum': 'adds all values of choice', 'print':'displays select code when ran', 'append':'used to add item to a list', 'pop':'used to take item out of list', 'title':'used to upercase the first letter in every output'}\n\nprint(f\"sum: {words['sum']}\")\nprint(f\"\\nprint: {words['print']}\")\nprint(f\"\\nappend: {words['append']}\")\nprint(f\"\\npop: {words['pop']}\")\nprint(f\"\\ntitle: {words['title']}\")\n</pre> words = {'sum': 'adds all values of choice', 'print':'displays select code when ran', 'append':'used to add item to a list', 'pop':'used to take item out of list', 'title':'used to upercase the first letter in every output'}  print(f\"sum: {words['sum']}\") print(f\"\\nprint: {words['print']}\") print(f\"\\nappend: {words['append']}\") print(f\"\\npop: {words['pop']}\") print(f\"\\ntitle: {words['title']}\") <pre>sum: adds all values of choice\n\nprint: displays select code when ran\n\nappend: used to add item to a list\n\npop: used to take item out of list\n\ntitle: used to upercase the first letter in every output\n</pre> In\u00a0[37]: Copied! <pre>words = {'sum': 'adds all values of choice', 'print':'displays select code when ran', 'append':'used to add item to a list', 'pop':'used to take item out of list', 'title':'used to upercase the first letter in every output'}\n\nfor key, value in words.items():\n    print(f\"\\n{key}:\")\n    print(f\"\\t{value}\")\n</pre> words = {'sum': 'adds all values of choice', 'print':'displays select code when ran', 'append':'used to add item to a list', 'pop':'used to take item out of list', 'title':'used to upercase the first letter in every output'}  for key, value in words.items():     print(f\"\\n{key}:\")     print(f\"\\t{value}\") <pre>\nsum:\n\tadds all values of choice\n\nprint:\n\tdisplays select code when ran\n\nappend:\n\tused to add item to a list\n\npop:\n\tused to take item out of list\n\ntitle:\n\tused to upercase the first letter in every output\n</pre> In\u00a0[38]: Copied! <pre>words_2 = {'sum': 'adds all values of choice', 'print':'displays select code when ran', 'append':'used to add item to a list', 'pop':'used to take item out of list', 'title':'used to upercase the first letter in every output', 'upper':'will uppercase selected code', 'def': 'starts the definition of a function', 'del':'deletes selected code from previous lists', 'input':'allows user to type in information to be used or saved', 'type':'identifies what a certain variable is'}\n\nfor key, value in words_2.items():\n    print(f\"\\n{key}:\")\n    print(f\"\\t{value}\")\n</pre> words_2 = {'sum': 'adds all values of choice', 'print':'displays select code when ran', 'append':'used to add item to a list', 'pop':'used to take item out of list', 'title':'used to upercase the first letter in every output', 'upper':'will uppercase selected code', 'def': 'starts the definition of a function', 'del':'deletes selected code from previous lists', 'input':'allows user to type in information to be used or saved', 'type':'identifies what a certain variable is'}  for key, value in words_2.items():     print(f\"\\n{key}:\")     print(f\"\\t{value}\") <pre>\nsum:\n\tadds all values of choice\n\nprint:\n\tdisplays select code when ran\n\nappend:\n\tused to add item to a list\n\npop:\n\tused to take item out of list\n\ntitle:\n\tused to upercase the first letter in every output\n\nupper:\n\twill uppercase selected code\n\ndef:\n\tstarts the definition of a function\n\ndel:\n\tdeletes selected code from previous lists\n\ninput:\n\tallows user to type in information to be used or saved\n\ntype:\n\tidentifies what a certain variable is\n</pre> In\u00a0[39]: Copied! <pre>riv = {'mississippi river':'USA', 'amazon river':'brazil', 'tigris river':'turkey'}\n\nfor key, value in riv.items():\n    print(f\"\\nThe {key.title()} runs through {value.title()}.\")\n</pre> riv = {'mississippi river':'USA', 'amazon river':'brazil', 'tigris river':'turkey'}  for key, value in riv.items():     print(f\"\\nThe {key.title()} runs through {value.title()}.\") <pre>\nThe Mississippi River runs through Usa.\n\nThe Amazon River runs through Brazil.\n\nThe Tigris River runs through Turkey.\n</pre> In\u00a0[40]: Copied! <pre>cities = {\n    'nashville':{'country':'USA','population':'678,448','fact':'largest city in Tennessee'},\n    'knoxville':{'country':'USA','population':'188,085','fact':'The University of Tennessee is located in Knoxville.'},\n    'new york city':{'country':'USA','population':'8.4 million','fact':'the most populated city in the United States'}\n}\n\nfor city, info in cities.items():\n    print(f'{city.title()}:')\n    print(f'\\tCountry: {info[\"country\"]}')\n    print(f'\\tPopulation: {info[\"population\"]}')\n    print(f'\\tFact: {info[\"fact\"]}')\n</pre> cities = {     'nashville':{'country':'USA','population':'678,448','fact':'largest city in Tennessee'},     'knoxville':{'country':'USA','population':'188,085','fact':'The University of Tennessee is located in Knoxville.'},     'new york city':{'country':'USA','population':'8.4 million','fact':'the most populated city in the United States'} }  for city, info in cities.items():     print(f'{city.title()}:')     print(f'\\tCountry: {info[\"country\"]}')     print(f'\\tPopulation: {info[\"population\"]}')     print(f'\\tFact: {info[\"fact\"]}')  <pre>Nashville:\n\tCountry: USA\n\tPopulation: 678,448\n\tFact: largest city in Tennessee\nKnoxville:\n\tCountry: USA\n\tPopulation: 188,085\n\tFact: The University of Tennessee is located in Knoxville.\nNew York City:\n\tCountry: USA\n\tPopulation: 8.4 million\n\tFact: the most populated city in the United States\n</pre> In\u00a0[41]: Copied! <pre>car = input('What kind of rental car would you like?: ')\nprint(f'\\nLet me see if I can find you a(n) {car}.')\n</pre> car = input('What kind of rental car would you like?: ') print(f'\\nLet me see if I can find you a(n) {car}.') <pre>\nLet me see if I can find you a(n) Ford.\n</pre> In\u00a0[42]: Copied! <pre>seating = int(input(\"How many people are in your party? \\n \"))\n\nif seating &lt; 8:\n  print('Your table is now ready!')\nelse:\n  print(\"You will have to wait 5 days for a table :(\")\n</pre> seating = int(input(\"How many people are in your party? \\n \"))  if seating &lt; 8:   print('Your table is now ready!') else:   print(\"You will have to wait 5 days for a table :(\")  <pre>You will have to wait 5 days for a table :(\n</pre> In\u00a0[43]: Copied! <pre>num = int(input('Enter a number, and I will tell you if it is a multiple of 10: '))\n\n\nif num % 10 == 0:\n    print('this number is a multiple of 10')\nelse:\n    print('this number is not a multiple of 10')\n</pre> num = int(input('Enter a number, and I will tell you if it is a multiple of 10: '))   if num % 10 == 0:     print('this number is a multiple of 10') else:     print('this number is not a multiple of 10') <pre>this number is not a multiple of 10\n</pre> In\u00a0[44]: Copied! <pre>pizzatop = '\\nLet me know what pizza toppings you would like to have: '\npizzatop += 'When you are done, type \"quit\" to end the program.'\n\nmessage = ''\nwhile message != 'quit':\n    message = input(pizzatop)\n    \n    if message != 'quit':\n        print(f'\\nwe are adding: {message}')\n</pre> pizzatop = '\\nLet me know what pizza toppings you would like to have: ' pizzatop += 'When you are done, type \"quit\" to end the program.'  message = '' while message != 'quit':     message = input(pizzatop)          if message != 'quit':         print(f'\\nwe are adding: {message}')          <pre>\nwe are adding: pepp\n\nwe are adding: cheese\n\nwe are adding: mushrooms\n</pre> In\u00a0[45]: Copied! <pre>def display_message():\n  print('I am learning about Python.')\n\ndisplay_message()\n</pre> def display_message():   print('I am learning about Python.')  display_message()  <pre>I am learning about Python.\n</pre> In\u00a0[46]: Copied! <pre>def favorite_book(book):\n\"\"\"Displays my favorite book.\"\"\"\n    print(f'One of my favorite books is {book.title()}.')\n          \nfavorite_book('prisoner B-3087')\n</pre> def favorite_book(book):     \"\"\"Displays my favorite book.\"\"\"     print(f'One of my favorite books is {book.title()}.')            favorite_book('prisoner B-3087')   <pre>One of my favorite books is Prisoner B-3087.\n</pre> In\u00a0[47]: Copied! <pre>def make_shirt(shirt_size, shirt_message):\n\"\"\"Displays shirt information\"\"\"\n    print(f'\\nThe shirt size must be {shirt_size}, and it should say {shirt_message}.')\n    \nmake_shirt('small', 'GO VOLS!')\nmake_shirt(shirt_size='small', shirt_message='GO VOLS!')\n</pre> def make_shirt(shirt_size, shirt_message):     \"\"\"Displays shirt information\"\"\"     print(f'\\nThe shirt size must be {shirt_size}, and it should say {shirt_message}.')      make_shirt('small', 'GO VOLS!') make_shirt(shirt_size='small', shirt_message='GO VOLS!') <pre>\nThe shirt size must be small, and it should say GO VOLS!.\n\nThe shirt size must be small, and it should say GO VOLS!.\n</pre> In\u00a0[48]: Copied! <pre>def make_shirt(size, message='I love Python'):\n\"\"\"Displays shirt information\"\"\"\n    print(f\"The shirt size is {size}, and it should say {message}.\")\n    \nmake_shirt('medium')\n</pre> def make_shirt(size, message='I love Python'):     \"\"\"Displays shirt information\"\"\"     print(f\"The shirt size is {size}, and it should say {message}.\")      make_shirt('medium') <pre>The shirt size is medium, and it should say I love Python.\n</pre> In\u00a0[49]: Copied! <pre>def describe_city(city, country='USA'):\n\"\"\"Displays city within a country.\"\"\"\n    print(f'\\n{city} is in {country}.')\n    \ndescribe_city('Los Angeles')\ndescribe_city('Nashville')\ndescribe_city('Mexico City', 'Mexico')\n</pre> def describe_city(city, country='USA'):     \"\"\"Displays city within a country.\"\"\"     print(f'\\n{city} is in {country}.')      describe_city('Los Angeles') describe_city('Nashville') describe_city('Mexico City', 'Mexico') <pre>\nLos Angeles is in USA.\n\nNashville is in USA.\n\nMexico City is in Mexico.\n</pre> In\u00a0[50]: Copied! <pre>def city_country(city, country):\n\"\"\"Displays city and country\"\"\"\n    print(f'{city}, {country}')\n    \ncity_country('San Francisco', 'USA')\ncity_country('Atlanta', 'USA')\ncity_country('Bejing', 'China')\n</pre> def city_country(city, country):     \"\"\"Displays city and country\"\"\"     print(f'{city}, {country}')      city_country('San Francisco', 'USA') city_country('Atlanta', 'USA') city_country('Bejing', 'China') <pre>San Francisco, USA\nAtlanta, USA\nBejing, China\n</pre> In\u00a0[51]: Copied! <pre>def make_album(artist, album_title):\n\"\"\"Return a dictionary for an album dictionary\"\"\"\n    music_album = {'artist': artist, 'album title': album_title}\n    return music_album\n\nalbum_dict = make_album('Radiohead', 'Pablo Honey')\nprint(album_dict)\nalbum_dict = make_album('The Beatles', 'Rubber Soul')\nprint(album_dict)\nalbum_dict = make_album('Gordon Lightfoot', 'Sundown')\nprint(album_dict)\n</pre> def make_album(artist, album_title):     \"\"\"Return a dictionary for an album dictionary\"\"\"     music_album = {'artist': artist, 'album title': album_title}     return music_album  album_dict = make_album('Radiohead', 'Pablo Honey') print(album_dict) album_dict = make_album('The Beatles', 'Rubber Soul') print(album_dict) album_dict = make_album('Gordon Lightfoot', 'Sundown') print(album_dict) <pre>{'artist': 'Radiohead', 'album title': 'Pablo Honey'}\n{'artist': 'The Beatles', 'album title': 'Rubber Soul'}\n{'artist': 'Gordon Lightfoot', 'album title': 'Sundown'}\n</pre> In\u00a0[52]: Copied! <pre>def make_album(artist, album_title, music = '0'):\n\"\"\"Return a dictionary for an album dictionary\"\"\"\n    music_album = {'artist': artist, 'album title': album_title}\n    \n    if music:\n        music_album['music'] = music\n    return music_album\n\nalbum_dict = make_album('Radiohead', 'Pablo Honey')\nprint(album_dict)\nalbum_dict = make_album('The Beatles', 'Rubber Soul')\nprint(album_dict)\nalbum_dict = make_album('Gordon Lightfoot', 'Sundown')\nprint(album_dict)\nalbum_dict = make_album('John Denver', 'Rocky Mountain High', music = '12')\nprint(album_dict)\n</pre> def make_album(artist, album_title, music = '0'):     \"\"\"Return a dictionary for an album dictionary\"\"\"     music_album = {'artist': artist, 'album title': album_title}          if music:         music_album['music'] = music     return music_album  album_dict = make_album('Radiohead', 'Pablo Honey') print(album_dict) album_dict = make_album('The Beatles', 'Rubber Soul') print(album_dict) album_dict = make_album('Gordon Lightfoot', 'Sundown') print(album_dict) album_dict = make_album('John Denver', 'Rocky Mountain High', music = '12') print(album_dict) <pre>{'artist': 'Radiohead', 'album title': 'Pablo Honey', 'music': '0'}\n{'artist': 'The Beatles', 'album title': 'Rubber Soul', 'music': '0'}\n{'artist': 'Gordon Lightfoot', 'album title': 'Sundown', 'music': '0'}\n{'artist': 'John Denver', 'album title': 'Rocky Mountain High', 'music': '12'}\n</pre> In\u00a0[53]: Copied! <pre>def user_makes_album(artist, album_title):\n\"\"\"Return a dictionary for an album dictionary\"\"\"\n    music_album = {'artist': artist, 'album title': album_title}\n    return music_album\n\nwhile True:\n    print('Give the name of the artist and the title the album')\n    print('Type \"quit\" when finished')\n    \n    artist = input(\"Artist Name: \")\n    if artist == 'quit':\n        break\n    album = input(\"Name of Album: \")\n    if album == 'quit':\n        break\n        \n    created_album = user_makes_album(artist, album)\n    print(f'{created_album}')\n</pre> def user_makes_album(artist, album_title):     \"\"\"Return a dictionary for an album dictionary\"\"\"     music_album = {'artist': artist, 'album title': album_title}     return music_album  while True:     print('Give the name of the artist and the title the album')     print('Type \"quit\" when finished')          artist = input(\"Artist Name: \")     if artist == 'quit':         break     album = input(\"Name of Album: \")     if album == 'quit':         break              created_album = user_makes_album(artist, album)     print(f'{created_album}') <pre>Give the name of the artist and the title the album\nType \"quit\" when finished\n{'artist': 'john', 'album title': 'apple'}\nGive the name of the artist and the title the album\nType \"quit\" when finished\n{'artist': 'john', 'album title': 'hellos'}\nGive the name of the artist and the title the album\nType \"quit\" when finished\n{'artist': 'tupac', 'album title': 'grass'}\nGive the name of the artist and the title the album\nType \"quit\" when finished\n{'artist': 'Hellos', 'album title': 'white'}\nGive the name of the artist and the title the album\nType \"quit\" when finished\n</pre> In\u00a0[54]: Copied! <pre>def show_messages(my_texts):\n\"\"\"Displays text message\"\"\"\n    for text in my_texts:\n        txt = f'{text}'\n        print(txt)\n\nthe_texts = ['hello!', 'good morning', 'have a great day!']\nshow_messages(the_texts)\n</pre> def show_messages(my_texts):     \"\"\"Displays text message\"\"\"     for text in my_texts:         txt = f'{text}'         print(txt)  the_texts = ['hello!', 'good morning', 'have a great day!'] show_messages(the_texts) <pre>hello!\ngood morning\nhave a great day!\n</pre> In\u00a0[55]: Copied! <pre>def send_messages(unsent, sent_messages):\n\"\"\"Moves unsent messages to sent messages\"\"\"\n    while unsent:\n        sending = unsent.pop()\n        print(f'delivering... \"{sending}\"')\n        sent_messages.append(sending)\n\nunsent = [input()]\nsent_messages = []\nsend_messages(unsent, sent_messages)\nprint(unsent)\nprint(sent_messages)\n</pre> def send_messages(unsent, sent_messages):     \"\"\"Moves unsent messages to sent messages\"\"\"     while unsent:         sending = unsent.pop()         print(f'delivering... \"{sending}\"')         sent_messages.append(sending)  unsent = [input()] sent_messages = [] send_messages(unsent, sent_messages) print(unsent) print(sent_messages) <pre>delivering... \"hello\"\n[]\n['hello']\n</pre> In\u00a0[56]: Copied! <pre>with open('texts/learning_python.txt') as file_object:\n    contents = file_object.read()\nprint(contents)\n</pre> with open('texts/learning_python.txt') as file_object:     contents = file_object.read() print(contents) <pre>In Python you can print things\nIn Python you can use the input function\n\n</pre> In\u00a0[57]: Copied! <pre>filename = 'texts/learning_python.txt'\n\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line)\n</pre> filename = 'texts/learning_python.txt'  with open(filename) as file_object:     for line in file_object:         print(line) <pre>In Python you can print things\n\nIn Python you can use the input function\n\n</pre> In\u00a0[58]: Copied! <pre>facts = []\nwith open(filename) as file_object:\n    for line in file_object:\n        facts.append(line)\nprint(facts)\n</pre> facts = [] with open(filename) as file_object:     for line in file_object:         facts.append(line) print(facts) <pre>['In Python you can print things\\n', 'In Python you can use the input function\\n']\n</pre> In\u00a0[59]: Copied! <pre>with open(filename) as file_object:\n    lines = file_object.readlines()\nfor line in lines:\n    line = line.rstrip()\n    print(line.replace('Python', 'C'))\n</pre> with open(filename) as file_object:     lines = file_object.readlines() for line in lines:     line = line.rstrip()     print(line.replace('Python', 'C')) <pre>In C you can print things\nIn C you can use the input function\n</pre> In\u00a0[60]: Copied! <pre>filename = 'texts/guest.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(input('what is your name? '))\n</pre> filename = 'texts/guest.txt'  with open(filename, 'w') as file_object:     file_object.write(input('what is your name? ')) In\u00a0[61]: Copied! <pre>print('tell us your name and then enter \"quit\" when done')\nwhile True:\n    name = input('\\ntell us your name: ')\n    if name == 'quit':\n        break\n    else:\n        with open (filename, 'a') as file_object:\n            file_object.write(f'\\n{name}')\n        print(f'thank you, {name}, for coming')\n</pre> print('tell us your name and then enter \"quit\" when done') while True:     name = input('\\ntell us your name: ')     if name == 'quit':         break     else:         with open (filename, 'a') as file_object:             file_object.write(f'\\n{name}')         print(f'thank you, {name}, for coming') <pre>tell us your name and then enter \"quit\" when done\nthank you, jack, for coming\n</pre> In\u00a0[62]: Copied! <pre>filename = 'texts/poll.txt'\n\nreasons = []\nwhile True:\n    reason = input('\\nWhy do you like programming?')\n    reasons.append(reason)\n    \n    end_poll = input('When you are finished giving reasons, type \"done\", otherwise hit enter.')\n    if end_poll == 'done':\n        break\nwith open (filename, 'a') as file_object:\n    for reason in reasons:\n        file_object.write(f'\\n{reason}')\n</pre> filename = 'texts/poll.txt'  reasons = [] while True:     reason = input('\\nWhy do you like programming?')     reasons.append(reason)          end_poll = input('When you are finished giving reasons, type \"done\", otherwise hit enter.')     if end_poll == 'done':         break with open (filename, 'a') as file_object:     for reason in reasons:         file_object.write(f'\\n{reason}') In\u00a0[63]: Copied! <pre>try:\n    x=input(\"Give me a number: \")\n    x=int(x)\n    \n    y=input(\"Give me another number: \")\n    y=int(y)\nexcept ValueError:\n    print(\"numbers only please\")\nelse:\n    sum = x+y\n    print(f\"The sum of your inputs is {str(sum)}.\")\n</pre> try:     x=input(\"Give me a number: \")     x=int(x)          y=input(\"Give me another number: \")     y=int(y) except ValueError:     print(\"numbers only please\") else:     sum = x+y     print(f\"The sum of your inputs is {str(sum)}.\") <pre>The sum of your inputs is 357.\n</pre> In\u00a0[64]: Copied! <pre>try:\n    x=input(\"Give me a number: \")\n    x=int(x)\n    \n    y=input(\"Give me another number: \")\n    y=int(y)\nexcept ValueError:\n    print(\"numbers only please\")\nelse:\n    sum = x+y\n    print(f\"The sum of your inputs is {str(sum)}.\")\n</pre> try:     x=input(\"Give me a number: \")     x=int(x)          y=input(\"Give me another number: \")     y=int(y) except ValueError:     print(\"numbers only please\") else:     sum = x+y     print(f\"The sum of your inputs is {str(sum)}.\") <pre>numbers only please\n</pre> In\u00a0[65]: Copied! <pre>print('when finished type \"done\"')\n\nwhile True:\n    try:\n        x = input('\\ngive first number')\n        if x == 'done':\n                  break\n        x = int(x)\n        \n        y = input('give second number')\n        if y == 'done':\n            break\n        y = int(y)\n        \n    except ValueError:\n        print('numbers only please')\n    \n    else:\n        sum = x+y\n        print(f'the sum of your inputs is {str(sum)}.')\n</pre> print('when finished type \"done\"')  while True:     try:         x = input('\\ngive first number')         if x == 'done':                   break         x = int(x)                  y = input('give second number')         if y == 'done':             break         y = int(y)              except ValueError:         print('numbers only please')          else:         sum = x+y         print(f'the sum of your inputs is {str(sum)}.') <pre>when finished type \"done\"\nthe sum of your inputs is 111.\nnumbers only please\nthe sum of your inputs is 666.\n</pre> In\u00a0[66]: Copied! <pre>filenames = ['texts/cats.txt', 'texts/dogs.txt', 'cats.txt']\n\nfor filename in filenames:\n    print(f'\\n{filename} contains: ')\n    try:\n        with open(filename) as f:\n            contents = f.read()\n            print(contents)\n    except FileNotFoundError:\n        print(\"This file does not exist\")\n</pre> filenames = ['texts/cats.txt', 'texts/dogs.txt', 'cats.txt']  for filename in filenames:     print(f'\\n{filename} contains: ')     try:         with open(filename) as f:             contents = f.read()             print(contents)     except FileNotFoundError:         print(\"This file does not exist\") <pre>\ntexts/cats.txt contains: \nZoe\nZippy\nZoopy\n\ntexts/dogs.txt contains: \nCharger\nRuff\nTodd\n\ncats.txt contains: \nThis file does not exist\n</pre> In\u00a0[67]: Copied! <pre>filenames = ['texts/cats.txt', 'texts/dogs.txt', 'cats.txt']\nfor filename in filenames:\n    print(f'\\n{filename} contains: ')\n    try:\n        with open(filename) as f:\n            contents = f.read()\n            print(contents)\n    except:\n        pass\n</pre> filenames = ['texts/cats.txt', 'texts/dogs.txt', 'cats.txt'] for filename in filenames:     print(f'\\n{filename} contains: ')     try:         with open(filename) as f:             contents = f.read()             print(contents)     except:         pass <pre>\ntexts/cats.txt contains: \nZoe\nZippy\nZoopy\n\ntexts/dogs.txt contains: \nCharger\nRuff\nTodd\n\ncats.txt contains: \n</pre> In\u00a0[68]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count('row')\n</pre> line = \"Row, row, row your boat\" line.count('row') Out[68]: <pre>2</pre> In\u00a0[69]: Copied! <pre>line.lower().count('row')\n</pre> line.lower().count('row') Out[69]: <pre>3</pre> In\u00a0[70]: Copied! <pre>def count_common_words(filename, word):\n\"\"\"Count how many times word appears in the text.\"\"\"\n    # Note: This is a really simple approximation, and the number returned\n    #   will be higher than the actual count.\n    try:\n        with open(filename, encoding='utf-8') as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        word_count = contents.count(word)\n\n        msg = f\"'{word}' appears in {filename} about {word_count} times.\"\n        print(msg)\n\nfilename = 'texts/odds_ends.txt'\ncount_common_words(filename, 'the')\n\nfilename = 'texts/adventure.txt'\ncount_common_words(filename, 'the')\n</pre> def count_common_words(filename, word):     \"\"\"Count how many times word appears in the text.\"\"\"     # Note: This is a really simple approximation, and the number returned     #   will be higher than the actual count.     try:         with open(filename, encoding='utf-8') as f:             contents = f.read()     except FileNotFoundError:         pass     else:         word_count = contents.count(word)          msg = f\"'{word}' appears in {filename} about {word_count} times.\"         print(msg)  filename = 'texts/odds_ends.txt' count_common_words(filename, 'the')  filename = 'texts/adventure.txt' count_common_words(filename, 'the') <pre>'the' appears in texts/odds_ends.txt about 4736 times.\n'the' appears in texts/adventure.txt about 482 times.\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[71]: Copied! <pre>def count_common_words(filename, word):\n\"\"\"Count how many times word appears in the text.\"\"\"\n    # Note: This is a really simple approximation, and the number returned\n    #   will be higher than the actual count.\n    try:\n        with open(filename, encoding='utf-8') as f:\n            contents = f.read()\n    except FileNotFoundError:\n        pass\n    else:\n        word_count = contents.lower().count(word)\n\n        msg = f\"'{word}' appears in {filename} about {word_count} times.\"\n        print(msg)\n\nfilename = 'texts/odds_ends.txt'\ncount_common_words(filename, 'the ')\n\nfilename = 'texts/adventure.txt'\ncount_common_words(filename, 'the ')\n</pre> def count_common_words(filename, word):     \"\"\"Count how many times word appears in the text.\"\"\"     # Note: This is a really simple approximation, and the number returned     #   will be higher than the actual count.     try:         with open(filename, encoding='utf-8') as f:             contents = f.read()     except FileNotFoundError:         pass     else:         word_count = contents.lower().count(word)          msg = f\"'{word}' appears in {filename} about {word_count} times.\"         print(msg)  filename = 'texts/odds_ends.txt' count_common_words(filename, 'the ')  filename = 'texts/adventure.txt' count_common_words(filename, 'the ') <pre>'the ' appears in texts/odds_ends.txt about 3354 times.\n'the ' appears in texts/adventure.txt about 358 times.\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"labs/lab5/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"labs/lab5/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geosdemo.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"labs/lab5/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"labs/lab5/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"labs/lab5/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"labs/lab5/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"labs/lab5/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"labs/lab5/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"labs/lab5/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"labs/lab5/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"labs/lab5/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"labs/lab5/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"labs/lab5/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"labs/lab5/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"labs/lab5/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"labs/lab5/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"labs/lab5/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"labs/lab5/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"labs/lab5/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"labs/lab5/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"labs/lab5/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"labs/lab5/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"labs/lab5/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"labs/lab5/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"labs/lab5/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"labs/lab5/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"labs/lab5/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"labs/lab5/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"labs/lab5/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"labs/lab5/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"labs/lab5/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"labs/lab5/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"labs/lab6/lab6/","title":"Lab 6","text":"In\u00a0[1]: Copied! <pre>import tight_loops\n</pre> import tight_loops In\u00a0[2]: Copied! <pre>m = tight_loops.Map(center=(40.7128, -74.0060), zoom=7, layers_control=False)\nm\n</pre> m = tight_loops.Map(center=(40.7128, -74.0060), zoom=7, layers_control=False) m <pre>Map(center=[40.7128, -74.006], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zo\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_search_control()\n</pre> m.add_search_control() <pre>SearchControl(found_style={'fillColor': '#3f0', 'color': '#0f0'}, options=['animate_location', 'auto_collapse'\u2026</pre> In\u00a0[4]: Copied! <pre>m.add_draw_control()\n</pre> m.add_draw_control() <pre>DrawControl(circle={'shapeOptions': {'fillColor': '#efed69', 'color': '#efed69', 'fillOpacity': 1.0}}, circlem\u2026</pre> In\u00a0[5]: Copied! <pre>m.add_layers_control()\n</pre> m.add_layers_control() <pre>LayersControl(options=['position'], position='topright')</pre> In\u00a0[6]: Copied! <pre>m.add_fullscreen_control()\n</pre> m.add_fullscreen_control() <pre>FullScreenControl(options=['position'])</pre> In\u00a0[7]: Copied! <pre>m.add_tile_layer(url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\", name=\"Satellite\", attribution=\"Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community\")\n</pre> m.add_tile_layer(url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\", name=\"Satellite\", attribution=\"Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community\") <pre>TileLayer(attribution='Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID\u2026</pre> In\u00a0[8]: Copied! <pre>m.add_basemap(\"roadmap\")\n</pre> m.add_basemap(\"roadmap\") In\u00a0[9]: Copied! <pre>m.add_geojson('map.geojson')\n</pre> m.add_geojson('map.geojson') <pre>GeoJSON(data={'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'properties': {}, 'geometry': {'co\u2026</pre> In\u00a0[10]: Copied! <pre>m.add_shp('countries.zip')\n</pre> m.add_shp('countries.zip') <pre>GeoJSON(data={'type': 'FeatureCollection', 'features': [{'id': '0', 'type': 'Feature', 'properties': {'NAME': \u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"labs/lab6/lab6/#lab-6","title":"Lab 6\u00b6","text":""},{"location":"labs/lab7/lab7/","title":"Lab 7","text":"In\u00a0[1]: Copied! <pre>import tight_loops\n</pre> import tight_loops In\u00a0[2]: Copied! <pre>m = tight_loops.Map(center=(40.7128, -74.0060), zoom=12)\nm\n</pre> m = tight_loops.Map(center=(40.7128, -74.0060), zoom=12) m <pre>Map(center=[40.7128, -74.006], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zo\u2026</pre> In\u00a0[3]: Copied! <pre>m.add_basemap('ROADMAP')\n</pre> m.add_basemap('ROADMAP') In\u00a0[4]: Copied! <pre>m.add_shp('../lab6/countries.zip')\n</pre> m.add_shp('../lab6/countries.zip') <pre>GeoJSON(data={'type': 'FeatureCollection', 'features': [{'id': '0', 'type': 'Feature', 'properties': {'NAME': \u2026</pre> In\u00a0[5]: Copied! <pre>m.add_geojson('../lab6/map.geojson')\n</pre> m.add_geojson('../lab6/map.geojson') <pre>GeoJSON(data={'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'properties': {}, 'geometry': {'co\u2026</pre> In\u00a0[6]: Copied! <pre>m.add_vector('districts.zip')\n</pre> m.add_vector('districts.zip') <pre>GeoJSON(data={'type': 'FeatureCollection', 'features': [{'id': '0', 'type': 'Feature', 'properties': {'STATEFP\u2026</pre> In\u00a0[7]: Copied! <pre>import tight_loops.folium_loops as tight_loops\n</pre> import tight_loops.folium_loops as tight_loops In\u00a0[13]: Copied! <pre>m = tight_loops.Map(location=(40, -100), zoom_start=5)\nm.add_basemap(\"satellite\")\nurl = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\nm.add_tile_layer(url, name=\"satellite\", attribution=\"Google\")\nm.add_geojson(\"map (1).geojson\")\nm.add_shp(\"../lab6/countries.zip\")\nm\n</pre> m = tight_loops.Map(location=(40, -100), zoom_start=5) m.add_basemap(\"satellite\") url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\" m.add_tile_layer(url, name=\"satellite\", attribution=\"Google\") m.add_geojson(\"map (1).geojson\") m.add_shp(\"../lab6/countries.zip\") m Out[13]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"labs/lab7/lab7/#lab-7","title":"Lab 7\u00b6","text":""},{"location":"labs/lab7/lab7/#overview-of-folium_loops","title":"Overview of folium_loops\u00b6","text":""},{"location":"labs/lab8/lab8/","title":"Lab8","text":"In\u00a0[1]: Copied! <pre>import tight_loops\n</pre> import tight_loops In\u00a0[2]: Copied! <pre>m = tight_loops.Map(center=(40.7128, -74.0060), zoom=12)\nm\n</pre> m = tight_loops.Map(center=(40.7128, -74.0060), zoom=12) m <pre>Map(center=[40.7128, -74.006], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zo\u2026</pre> In\u00a0[3]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name=\"raster\", fit_bounds=True)\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name=\"raster\", fit_bounds=True) In\u00a0[4]: Copied! <pre>m.opacity_slider()\n</pre> m.opacity_slider() In\u00a0[5]: Copied! <pre>url = \"https://wildlife.ca.gov/Portals/0/Images/Fishing/Inland/BrookTrout/BrookTrout-DuaneRaver-USFWS.png\"\n</pre> url = \"https://wildlife.ca.gov/Portals/0/Images/Fishing/Inland/BrookTrout/BrookTrout-DuaneRaver-USFWS.png\" In\u00a0[6]: Copied! <pre>m.add_image(url, width=100, height=50, position=\"bottomleft\")\n</pre> m.add_image(url, width=100, height=50, position=\"bottomleft\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"labs/lab8/lab8/#lab-8","title":"Lab 8\u00b6","text":""},{"location":"labs/lab9/lab9/","title":"Lab9","text":"In\u00a0[1]: Copied! <pre>import tight_loops\n</pre> import tight_loops In\u00a0[2]: Copied! <pre>m = tight_loops.Map(center=(40, -100), zoom=4)\nm\n</pre> m = tight_loops.Map(center=(40, -100), zoom=4) m <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre>"},{"location":"labs/lab9/lab9/#lab-9","title":"Lab 9\u00b6","text":""}]}